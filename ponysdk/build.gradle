ext {
    resourcesCoreTest = "src/test/resources"
    gwtOutputDirName = buildDir.name + "/gwt"
    buildInfoOutputDirName = buildDir.name + "/buildinfo"
    javadocResources = "src/main/javadoc"
    
    jsinteropVersion = '1.0.2'
    
    javaxServletVersion = '3.1.0'
    glassfishVersion = '1.1.2'
    jsonVersion = '1.1.2'
    javaxValidationVersion = '1.0.0.GA'
    seleniumVersion = '3.9.1'
    junitVersion = '4.12'
    tyrusVersion = '1.13.1'
    mockitoVersion = '1.10.19'
}

configurations {
    gwtdev
}

dependencies {
    gwtdev(
        'com.google.gwt:gwt-dev:' + gwtVersion
    )

    compile('javax.validation:validation-api:' + javaxValidationVersion) {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }

    compile(
            'com.google.gwt:gwt-user:' + gwtVersion,
            'com.google.gwt:gwt-elemental:' + gwtVersion,
            'com.google.jsinterop:jsinterop:' + jsinteropVersion,
            'com.google.jsinterop:jsinterop-annotations:' + jsinteropVersion,

            'org.eclipse.jetty:jetty-server:' + jettyVersion,
            'org.eclipse.jetty:jetty-servlet:' + jettyVersion,
            'org.eclipse.jetty:jetty-webapp:' + jettyVersion,
            'org.eclipse.jetty:jetty-servlets:' + jettyVersion,
            'org.eclipse.jetty:jetty-client:' + jettyVersion,
            'org.eclipse.jetty:jetty-io:' + jettyVersion,
            'org.eclipse.jetty:jetty-util:' + jettyVersion,
            'org.eclipse.jetty:jetty-http:' + jettyVersion,
            'org.eclipse.jetty:jetty-security:' + jettyVersion,
            'org.eclipse.jetty:jetty-continuation:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-api:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-common:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-server:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-servlet:' + jettyVersion,
            'org.eclipse.jetty.websocket:javax-websocket-server-impl:' + jettyVersion,

            'org.springframework:spring-core:' + springVersion,
            'org.springframework:spring-web:' + springVersion,
            'org.springframework:spring-beans:' + springVersion,
            'org.springframework:spring-context:' + springVersion,

            'org.slf4j:slf4j-api:' + slf4jVersion,

            'javax.servlet:javax.servlet-api:' + javaxServletVersion,
            'javax.json:javax.json-api:' + jsonVersion,
            'org.glassfish:javax.json:' + glassfishVersion,
            
            'org.seleniumhq.selenium:selenium-api:' + seleniumVersion,
            'org.seleniumhq.selenium:selenium-java:' + seleniumVersion,
            'javax.websocket:javax.websocket-client-api:1.1',
            'org.glassfish.tyrus:tyrus-client:' + tyrusVersion,
            'org.glassfish.tyrus.ext:tyrus-extension-deflate:' + tyrusVersion
    )

    testCompile(
            'junit:junit:' + junitVersion,
            'org.mockito:mockito-all:' + mockitoVersion,
            'org.seleniumhq.selenium:selenium-api:' + seleniumVersion,
            'org.seleniumhq.selenium:selenium-java:' + seleniumVersion,
            'javax.websocket:javax.websocket-client-api:1.1',
            'org.glassfish.tyrus:tyrus-client:' + tyrusVersion
    )

    testRuntime(
            'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
            'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
            'org.slf4j:jul-to-slf4j:' + slf4jVersion,
            'org.apache.logging.log4j:log4j-api:' + log4jVersion,
            'org.apache.logging.log4j:log4j-core:' + log4jVersion,
            'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion,
            
            'org.glassfish.tyrus:tyrus-container-grizzly-client:' + tyrusVersion
    )
}

jar {
    baseName = 'ponysdk'
    into('ponyterminal') {
        from gwtOutputDirName + '/prod/gwt/ponyterminal'
    }
    into('ponyterminaldebug') {
        from gwtOutputDirName + '/debug/gwt/ponyterminaldebug'
    }

    exclude('*.devmode.js')
    exclude('*compilation-mappings.txt')

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

javadoc {
    exclude '**/terminal/**'
}

task createGWTProdBuildDir << {
    mkdir new File(gwtOutputDirName, "prod")
}

task gwtc(dependsOn: 'classes', type: JavaExec) {
    inputs.dir('src/main/java/com/ponysdk/core/terminal')
    outputs.dir(gwtOutputDirName + '/prod/gwt/ponyterminal')
    description = "GWT compile to JavaScript (production mode)"
    main = 'com.google.gwt.dev.Compiler'
    workingDir = new File(gwtOutputDirName, "prod")

    classpath {
        [
                sourceSets.main.java.srcDirs,
                configurations.compile,
                configurations.gwtdev
        ]
    }

    args = [
            '-war',
            'gwt',
            '-localWorkers',
            Runtime.getRuntime().availableProcessors(),
            'com.ponysdk.core.PonyTerminal',
            '-generateJsInteropExports'
    ]

    maxHeapSize = '512M'
}

task createGWTDebugBuildDir << {
    mkdir new File(gwtOutputDirName, "debug")
}

task gwtcDebug(dependsOn: classes, type: JavaExec) {
    inputs.dir('src/main/java/com/ponysdk/core/terminal')
    outputs.dir(gwtOutputDirName + '/debug/gwt/ponyterminaldebug')
    description = "GWT compile to JavaScript (debug mode)"
    main = 'com.google.gwt.dev.Compiler'
    workingDir = new File(gwtOutputDirName, "debug")

    classpath {
        [
                sourceSets.main.java.srcDirs,
                configurations.compile,
                configurations.gwtdev
        ]
    }

    args = [
            '-war',
            'gwt',
            '-localWorkers',
            Runtime.getRuntime().availableProcessors(),
            'com.ponysdk.core.PonyTerminalDebug',
            '-generateJsInteropExports',
            '-style', 'DETAILED',
            '-optimize', '0'
    ]

    maxHeapSize = '512M'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.test.allJava

    from(sourceSets.main.java.srcDirs) {
        include '**/*.xml'
    }

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Classifier": "sources")
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

test {
    classpath = files(resourcesCoreTest, gwtOutputDirName) + classpath
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

artifacts {
    archives sourcesJar
}

gwtc.dependsOn('createGWTProdBuildDir')
jar.dependsOn('gwtc')

gwtcDebug.dependsOn('createGWTDebugBuildDir')
jar.dependsOn('gwtcDebug')